qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg)
qplot(drv, hwy, data = mpg, geom = "bloxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy)
qplot(hwy, data = mpg, fill = drv)
qpl
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qpl
qplot
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swril Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, color = aes(drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
exit()
0
info()
bye()
library(swirl)
rm(list = ls())
swirl()
g + geom_point(color = drv)
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage)
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage"")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement, y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = disp, y = hwy, color = factor(year)))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g
g + geom_point()
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Dsiplacement", y = Highway Mileage, title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Dsiplacement", y = "Highway Mileage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", size = 2, se = FALSE, color = "black") + labs(x  = "Dsiplacement", y = "Highway Mileage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv ~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x  = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(x = price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, prices, data = diamonds)
qplot(x = carat, y = price, data = diamonds)
qplot(x = carat, y = price, data = diamonds, shape = cut)
qplot(x = carat, y = price, data = diamonds, color = cut)
qplot(x = carat, y = price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(x = carat, y = price, data = diamonds, color = cut)
qplot(x = carat, y = price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(x = carat, y = price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~cut())
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
rm(list = ls())
listfiles <- dir()
if ("activity.csv" %in% listfiles){
actdf <- read.csv("activity.csv")
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
}else{
print("No files found!!!")
}
}ac
setwd("E:\Luciano\R_WorkingDir\Reproducible Research\RepData_PeerAssessment1")
getwd()
wdir <- getwd()
if (wdir != "E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1"){
setwd("E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1")
}
rm(list = ls())
listfiles <- dir()
if ("activity.csv" %in% listfiles){
actdf <- read.csv("activity.csv")
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
}else{
print("No files found!!!")
}
}ac
wdir <- getwd()
if (wdir != "E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1"){
setwd("E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1")
}
rm(list = ls())
listfiles <- dir()
if ("activity.csv" %in% listfiles){
actdf <- read.csv("activity.csv")
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
}else{
print("No files found!!!")
}
}
listfiles
head(actdf)
qplot
instpackages <- installed.packages()
if (("ggplot2" %in% instpackages)){
library(ggplot2)
}else{
install.packages("ggplot2")
library(ggplot2)
}
qplot(steps, data = actdf, facets = data~., binwith = 2)
qplot(steps, data = actdf, facets = data~., binwidth = 2)
qplot(steps, data = actdf, facets = date~., binwidth = 2)
factor(actdf$date)
qplot(steps, data = actdf, fill = factor(date))
?hist
hist(actdf$steps, breaks = factor(actdf$date))
hist(actdf$steps, breaks = 61)
hist(actdf$date)
head(actdf)
newdf <- na.omit(actdf)
head(new())
head(newdf
9
head(newdf)
factor(newdf$date)
levels(factor(newdf$date))
hist(newdf$steps, breaks = 61)
tapply(newdf$steps, newdf$date, FUN = sum)
head(newdf)
tapply(newdf$steps, newdf$date, FUN = sum)
?tapply(vector, index, function)
?tapply
tapply(newdf$steps, newdf$date, FUN = sum, default = 0)
totaldays <- tapply(newdf$steps, newdf$date, FUN = sum, default = 0)
hist(totaldays)
totaldays <- tapply(newdf$steps, newdf$date, FUN = sum)
hist(totaldays)
hist(totaldays, main = "Total number of steps taken each day")
?hist
hist(totaldays, breacks = 61,  main = "Total number of steps taken each day")
?hist
hist(totaldays, main = "Total number of steps taken each day", col = "blue")
?hist
hist(totaldays, main = "Histogram of the total number of steps", xlab = "Total number of steps taken each day", col = "blue")
hist(totaldays, main = "Histogram of the total number of steps", xlab = "Total number of steps taken each day", col = "grey")
hist(totaldays, main = "Histogram of the total number of steps", xlab = "Total number of steps taken each day", col = "grey", border = 5)
hist(totaldays, main = "Histogram of the total number of steps", xlab = "Total number of steps taken each day", col = "grey", border = 3)
hist(totaldays, main = "Histogram of the total number of steps", xlab = "Total number of steps taken each day", col = "grey", border = "green")
mean(totaldays)
mean?
?mean
mean(totaldays, na.rm = TRUE)
median(totaldays, n)
median(totaldays, na.rm = TRUE)
qplot(totaldays)
?qplot
class(totaldays)
?abline
hist(totaldays, main = "Histogram of the total number of steps",
xlab = "Total number of steps taken each day",
col = "grey", border = "green")
instpackages <- installed.packages()
if (("ggplot2" %in% instpackages)){
library(ggplot2)
}else{
install.packages("ggplot2")
library(ggplot2)
}
totaldays <- tapply(newdf$steps, newdf$date, FUN = sum)
hist(totaldays, main = "Histogram of the total number of steps",
xlab = "Total number of steps taken each day",
col = "grey", border = "green")
meansteps <- mean(totaldays, na.rm = TRUE)
mediansteps <- median(totaldays, na.rm = TRUE)
abline(meansteps)
hist(totaldays, main = "Histogram of the total number of steps",
hist(totaldays, main = "Histogram of the total number of steps",
xlab = "Total number of steps taken each day",
col = "grey", border = "green")
abline(v = meansteps, col = "royalblue", lwd = 2)
abline(v = mediansteps, col = "green", lwd = 2)
abline(v = mediansteps, col = "red", lwd = 2)
?box
?hist
hist(totaldays, main = "Histogram of the total number of steps",
xlab = "Total number of steps taken each day",
col = "grey", border = "green", xlim = range(breaks)
)
hist(totaldays, main = "Histogram of the total number of steps",
xlab = "Total number of steps taken each day",
col = "grey", border = "green")
?legend
head(newdf)
?plot.ts
plot.ts
plot.ts(x = newdf$steps)
plot.ts(x = totaldays)
plot.ts(x = newdf$steps, type = "1")
plot.ts(x = newdf$steps)
?ts
ts(newdf)
stepsseries <- ts(newdf)
plot.ts(stepsseries)
?plot
?aggregate
aggregate(steps ~ inteval, newdf, mean)
with?
?with
with(newdf, aggregate(steps ~ interval, newdf, mean))
intersteps <- with(newdf, aggregate(steps ~ interval, newdf, mean))
plot(x = intersteps$interval, y = intersteps$steps, type = "l")
intersteps <- with(newdf, tapply(steps, interval, mean)
)
intersteps
plot(x = intersteps$interval, y = intersteps$steps, type = "l")
class(intersteps))
class(intersteps)
intersteps <- with(newdf, aggregate(steps ~ interval, newdf, mean))
class(intersteps)
View(intersteps)
wdir <- getwd()
if (wdir != "E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1"){
setwd("E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment1")
}
rm(list = ls())
listfiles <- dir()
if ("activity.csv" %in% listfiles){
actdf <- read.csv("activity.csv")
newdf <- na.omit(actdf)
}else{
if ("activity.zip" %in% listfiles){
unzip(zipfile = "activity.zip")
actdf <- read.csv("activity.csv")
newdf <- na.omit(actdf)
}else{
print("No files found!!!")
}
}
intersteps <- with(newdf, aggregate(steps ~ interval, newdf, mean))
plot(x = intersteps$interval, y = intersteps$steps, type = "l")
?PLOT
?plot
plot(x = intersteps$interval, y = intersteps$steps, type = "l")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "blue")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "red")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "red", main = "Average daily activity pattern")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "red", main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
?col
colorspaces
colors()
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "white", main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = 1, main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = 0, main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "blcak", main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "black", main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
plot(x = intersteps$interval, y = intersteps$steps, type = "l", col = "tomato", main = "Average daily activity pattern",
xlab = "Interval", ylab = "Average number of steps")
max(intersteps$steps)
intersteps$interval[intersteps$interval == max(intersteps$interval)]
intersteps$interval[,intersteps$interval == max(intersteps$interval)]
intersteps$interval[intersteps$interval == max(intersteps$interval),]
which.max(intersteps$steps)
intersteps[104]
intersteps[,104]
intersteps[104,]
intersteps$interval[104,]
intersteps$interval[[104,]]
intersteps[104]
intersteps[[104]]
intersteps[,104]
intersteps[104,]
intersteps[104,]$interval
?complete.cases
complete.cases(actdf)
sum(complete.cases(actdf))
summary(actdf)
summarydata <- summary(actdf)
class(summarydata)
summarydata["NA's", "steps"]
summarydata["NA's"]
summarydata["steps"]
summarydata[steps]
summarydata[1]
summarydata["NA's"]
summary?
?summary
as.factor(summarydata)
factordata <- as.factor(summarydata)
factordata
factordata[1]
factordata[20]
factordata[19]
summarydata <- as.dataframe(summary(actdf))
summarydata <- as.data.frame(summary(actdf))
summarydata
totalincomplete <- sum(is.na(actdf$steps))
totalincomplete
head(intersteps)
head(actdf)
newactdf <- actdf
head(newactdf)
newactdf[newactdf$steps == "NA"] <- intersteps$steps[intersteps$interval == newactdf$interval]
totalincomplete <- sum(is.na(actdf$steps))
newactdf <- actdf
for (i in 1:nrow(newactdf)) {
if (is.na(newactdf$steps[i])){
interval <- newactdf$interval[i]
meansteps <- intersteps[intersteps$interval==interval]
newactdf$steps[i] <- meansteps
}
}
for (i in 1:nrow(newactdf)) {
if (is.na(newactdf$steps[i])){
interval <- newactdf$interval[i]
meansteps <- intersteps[intersteps$interval==interval]
newactdf$steps[i] <- meansteps
}
}
intersteps
intersteps$steps[intersteps$interval == 25]
totalincomplete <- sum(is.na(actdf$steps))
newactdf <- actdf
for (i in 1:nrow(newactdf)) {
if (is.na(newactdf$steps[i])){
interval <- newactdf$interval[i]
meansteps <- intersteps$steps[intersteps$interval == interval]
newactdf$steps[i] <- meansteps
}
}
head(newactdf)
?par
?mfrow
?sub
?weekdays
class(newactdf$date)
as.Date(newactdf$date)
weekdays(as.Date(newactdf$date))
weekdays(as.Date(newactdf$date))
weekdays(newactdf$date)
isweekend
?isWeekend
??isWeekend
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend), lebels = c(FALSE,TRUE))
factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE))
WEND <- C("Saturday", "Sunday")
wend <- c("Saturday", "Sunday")
factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE))
factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE), labels = c("weekend", "weekday"))
factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE))
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend), levels = c(FALSE, TRUE))
newactdf
head(newactdf)
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekdany", "weekend"))
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
head(newactdf)
tail(newactdf)
par(mfrow = c(2,1), mar = c(4,4,2,1))
View(newactdf)
qplot(x = interval, y = steps, data = newactdf, color = weekend)
qplot(x = interval, y = steps, data = newactdf, color = weekend, type = "l")
?qplot
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
newnewtotdaysdf$weekend <- factor((weekdays(as.Date(newtotaldays$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
newtotaldays <- tapply(newactdf$steps, newactdf$date, FUN = sum)
head(newtotaldays)
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
newtotaldays$weekend <- factor((weekdays(as.Date(newtotaldays$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wend
newtotaldays$weekend <- factor((weekdays(as.Date(newtotaldays$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
newnewtotaldays <- tapply(newactdf$steps, newactdf$date, FUN = sum)
head(newnewtotaldays)
head(newactdf)
wday <- newactdf[newactdf$weekend == "weekday"]
wday <- newactdf[,newactdf$weekend == "weekday"]
newactdf[newactdf$weekend == FALSE]
newactdf[newactdf$weekend == "weekend"]
wday <- newactdf[newactdf$weekend == FALSE]
head(wday)
wday <- newactdf[newactdf$weekend == "weekend"]
wday <- newactdf[newactdf$weekend == "weekday"]
class(newactdf$weekend)
wday <- newactdf[which(newactdf$weekend == selected["weekday"]]
head(newactdf)
wenddata <- newactdf[newactdf$weekend == "wekend"]
wdaydata <- newactdf[newactdf$weekend == "weekday"]
wdaydata <- newactdf[newactdf$weekend == "weekday"]
wenddata
wenddata <- newactdf[newactdf$weekend == "wekend",]
wenddata
wenddata <- newactdf[newactdf$weekend == "weekend",]
wenddata
wdaydata <- newactdf[newactdf$weekend == "weekday",]
wdaydata
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = sum)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = sum)
plot(totalwday)
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = sum)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = sum)
plot(totalwday, tpye = "l")
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = sum)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = sum)
plot(totalwday, type = "l")
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = sum)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = sum)
par(mfrow = c(2,1))
plot(totalwday, type = "l", col = "blue")
plot(totalwend, type = "l", col = "red")
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = mean)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = mean)
par(mfrow = c(2,1))
plot(totalwday$, type = "l", col = "blue")
wend <- c("Saturday", "Sunday")
newactdf$weekend <- factor((weekdays(as.Date(newactdf$date)) %in% wend),
levels = c(FALSE, TRUE), labels = c("weekday", "weekend"))
wenddata <- newactdf[newactdf$weekend == "weekend",]
wdaydata <- newactdf[newactdf$weekend == "weekday",]
totalwend <- tapply(wenddata$steps, wenddata$date, FUN = mean)
totalwday <- tapply(wdaydata$steps, wdaydata$date, FUN = mean)
par(mfrow = c(2,1))
plot(totalwday, type = "l", col = "blue")
plot(totalwend, type = "l", col = "red")
head(totalwday)
par(mfrow = c(2,1))
plot(totalwday, type = "l", col = "blue")
plot(totalwend, type = "l", col = "red")
newintersteps <- with(newactdf, aggregate(steps ~ interval, newdf, mean))
head(newintersteps)
wenddata
head(newwendsteps)
newwendsteps <- with(wenddata, aggregate(steps ~ interval, newdf, mean))
newwdaysteps <- with(wdaydata, aggregate(steps ~ interval, newdf, mean))
head(newwendsteps)
plot(newwendsteps, type = "l", col = "blue")
sessionInfo()
loadcache()
setwd("E:/Luciano/R_WorkingDir/Reproducible Research/RepData_PeerAssessment2")
